{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0c9b0622",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6d1e3c74",
   "metadata": {},
   "outputs": [],
   "source": [
    "train = pd.read_csv('crop_modified.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "32b4480c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State_Name</th>\n",
       "      <th>District_Name</th>\n",
       "      <th>Crop_Year</th>\n",
       "      <th>Season</th>\n",
       "      <th>Crop</th>\n",
       "      <th>Area</th>\n",
       "      <th>Production</th>\n",
       "      <th>cat_crop</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Andaman and Nicobar Islands</td>\n",
       "      <td>NICOBARS</td>\n",
       "      <td>2000</td>\n",
       "      <td>Kharif</td>\n",
       "      <td>Arecanut</td>\n",
       "      <td>1254.0</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>Nuts</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Andaman and Nicobar Islands</td>\n",
       "      <td>NICOBARS</td>\n",
       "      <td>2000</td>\n",
       "      <td>Kharif</td>\n",
       "      <td>Other Kharif pulses</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Pulses</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Andaman and Nicobar Islands</td>\n",
       "      <td>NICOBARS</td>\n",
       "      <td>2000</td>\n",
       "      <td>Kharif</td>\n",
       "      <td>Rice</td>\n",
       "      <td>102.0</td>\n",
       "      <td>321.0</td>\n",
       "      <td>Cereal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Andaman and Nicobar Islands</td>\n",
       "      <td>NICOBARS</td>\n",
       "      <td>2000</td>\n",
       "      <td>Whole Year</td>\n",
       "      <td>Banana</td>\n",
       "      <td>176.0</td>\n",
       "      <td>641.0</td>\n",
       "      <td>Fruits</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Andaman and Nicobar Islands</td>\n",
       "      <td>NICOBARS</td>\n",
       "      <td>2000</td>\n",
       "      <td>Whole Year</td>\n",
       "      <td>Cashewnut</td>\n",
       "      <td>720.0</td>\n",
       "      <td>165.0</td>\n",
       "      <td>Nuts</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242356</th>\n",
       "      <td>West Bengal</td>\n",
       "      <td>PURULIA</td>\n",
       "      <td>2014</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rice</td>\n",
       "      <td>306.0</td>\n",
       "      <td>801.0</td>\n",
       "      <td>Cereal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242357</th>\n",
       "      <td>West Bengal</td>\n",
       "      <td>PURULIA</td>\n",
       "      <td>2014</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Sesamum</td>\n",
       "      <td>627.0</td>\n",
       "      <td>463.0</td>\n",
       "      <td>Oilseeds</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242358</th>\n",
       "      <td>West Bengal</td>\n",
       "      <td>PURULIA</td>\n",
       "      <td>2014</td>\n",
       "      <td>Whole Year</td>\n",
       "      <td>Sugarcane</td>\n",
       "      <td>324.0</td>\n",
       "      <td>16250.0</td>\n",
       "      <td>Sugarcane</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242359</th>\n",
       "      <td>West Bengal</td>\n",
       "      <td>PURULIA</td>\n",
       "      <td>2014</td>\n",
       "      <td>Winter</td>\n",
       "      <td>Rice</td>\n",
       "      <td>279151.0</td>\n",
       "      <td>597899.0</td>\n",
       "      <td>Cereal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242360</th>\n",
       "      <td>West Bengal</td>\n",
       "      <td>PURULIA</td>\n",
       "      <td>2014</td>\n",
       "      <td>Winter</td>\n",
       "      <td>Sesamum</td>\n",
       "      <td>175.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>Oilseeds</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>242361 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                         State_Name District_Name  Crop_Year       Season  \\\n",
       "0       Andaman and Nicobar Islands      NICOBARS       2000  Kharif        \n",
       "1       Andaman and Nicobar Islands      NICOBARS       2000  Kharif        \n",
       "2       Andaman and Nicobar Islands      NICOBARS       2000  Kharif        \n",
       "3       Andaman and Nicobar Islands      NICOBARS       2000  Whole Year    \n",
       "4       Andaman and Nicobar Islands      NICOBARS       2000  Whole Year    \n",
       "...                             ...           ...        ...          ...   \n",
       "242356                  West Bengal       PURULIA       2014  Summer        \n",
       "242357                  West Bengal       PURULIA       2014  Summer        \n",
       "242358                  West Bengal       PURULIA       2014  Whole Year    \n",
       "242359                  West Bengal       PURULIA       2014  Winter        \n",
       "242360                  West Bengal       PURULIA       2014  Winter        \n",
       "\n",
       "                       Crop      Area  Production   cat_crop  \n",
       "0                  Arecanut    1254.0      2000.0       Nuts  \n",
       "1       Other Kharif pulses       2.0         1.0     Pulses  \n",
       "2                      Rice     102.0       321.0     Cereal  \n",
       "3                    Banana     176.0       641.0     Fruits  \n",
       "4                 Cashewnut     720.0       165.0       Nuts  \n",
       "...                     ...       ...         ...        ...  \n",
       "242356                 Rice     306.0       801.0     Cereal  \n",
       "242357              Sesamum     627.0       463.0   Oilseeds  \n",
       "242358            Sugarcane     324.0     16250.0  Sugarcane  \n",
       "242359                 Rice  279151.0    597899.0     Cereal  \n",
       "242360              Sesamum     175.0        88.0   Oilseeds  \n",
       "\n",
       "[242361 rows x 8 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ad0cc3ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "State_Name        object\n",
       "District_Name     object\n",
       "Crop_Year          int64\n",
       "Season            object\n",
       "Crop              object\n",
       "Area             float64\n",
       "Production       float64\n",
       "cat_crop          object\n",
       "dtype: object"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f4f438aa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "State_Name       0\n",
       "District_Name    0\n",
       "Crop_Year        0\n",
       "Season           0\n",
       "Crop             0\n",
       "Area             0\n",
       "Production       0\n",
       "cat_crop         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "be5c7500",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Andaman and Nicobar Islands', 'Andhra Pradesh',\n",
       "       'Arunachal Pradesh', 'Assam', 'Bihar', 'Chandigarh',\n",
       "       'Chhattisgarh', 'Dadra and Nagar Haveli', 'Goa', 'Gujarat',\n",
       "       'Haryana', 'Himachal Pradesh', 'Jammu and Kashmir ', 'Jharkhand',\n",
       "       'Karnataka', 'Kerala', 'Madhya Pradesh', 'Maharashtra', 'Manipur',\n",
       "       'Meghalaya', 'Mizoram', 'Nagaland', 'Odisha', 'Puducherry',\n",
       "       'Punjab', 'Rajasthan', 'Sikkim', 'Tamil Nadu', 'Telangana ',\n",
       "       'Tripura', 'Uttar Pradesh', 'Uttarakhand', 'West Bengal'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['State_Name'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "96326cc8",
   "metadata": {},
   "outputs": [],
   "source": [
    "train.loc[(train['State_Name']=='Andaman and Nicobar Islands'),'State_Name']=1\n",
    "train.loc[(train['State_Name']=='Andhra Pradesh'),'State_Name']=2\n",
    "train.loc[(train['State_Name']=='Arunachal Pradesh'),'State_Name']=3\n",
    "train.loc[(train['State_Name']=='Assam'),'State_Name']=4\n",
    "train.loc[(train['State_Name']=='Bihar'),'State_Name']=5\n",
    "train.loc[(train['State_Name']=='Chandigarh'),'State_Name']=6\n",
    "train.loc[(train['State_Name']=='Chhattisgarh'),'State_Name']=7\n",
    "train.loc[(train['State_Name']=='Dadra and Nagar Haveli'),'State_Name']=8\n",
    "train.loc[(train['State_Name']=='Goa'),'State_Name']=9\n",
    "train.loc[(train['State_Name']=='Gujarat'),'State_Name']=10\n",
    "train.loc[(train['State_Name']=='Haryana'),'State_Name']=11\n",
    "train.loc[(train['State_Name']=='Himachal Pradesh'),'State_Name']=12\n",
    "train.loc[(train['State_Name']=='Jammu and Kashmir '),'State_Name']=13\n",
    "train.loc[(train['State_Name']=='Jharkhand'),'State_Name']=14\n",
    "train.loc[(train['State_Name']=='Karnataka'),'State_Name']=15\n",
    "train.loc[(train['State_Name']=='Kerala'),'State_Name']=16\n",
    "train.loc[(train['State_Name']=='Madhya Pradesh'),'State_Name']=17\n",
    "train.loc[(train['State_Name']=='Maharashtra'),'State_Name']=18\n",
    "train.loc[(train['State_Name']=='Manipur'),'State_Name']=19\n",
    "train.loc[(train['State_Name']=='Meghalaya'),'State_Name']=20\n",
    "train.loc[(train['State_Name']=='Mizoram'),'State_Name']=21\n",
    "train.loc[(train['State_Name']=='Nagaland'),'State_Name']=22\n",
    "train.loc[(train['State_Name']=='Odisha'),'State_Name']=23\n",
    "train.loc[(train['State_Name']=='Puducherry'),'State_Name']=24\n",
    "train.loc[(train['State_Name']=='Punjab'),'State_Name']=25\n",
    "train.loc[(train['State_Name']=='Rajasthan'),'State_Name']=26\n",
    "train.loc[(train['State_Name']=='Sikkim'),'State_Name']=27\n",
    "train.loc[(train['State_Name']=='Tamil Nadu'),'State_Name']=28\n",
    "train.loc[(train['State_Name']=='Telangana '),'State_Name']=29\n",
    "train.loc[(train['State_Name']=='Tripura'),'State_Name']=30\n",
    "train.loc[(train['State_Name']=='Uttar Pradesh'),'State_Name']=31\n",
    "train.loc[(train['State_Name']=='Uttarakhand'),'State_Name']=32\n",
    "train.loc[(train['State_Name']=='West Bengal'),'State_Name']= 33"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2efdb8b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0          1\n",
       "1          1\n",
       "2          1\n",
       "3          1\n",
       "4          1\n",
       "          ..\n",
       "242356    33\n",
       "242357    33\n",
       "242358    33\n",
       "242359    33\n",
       "242360    33\n",
       "Name: State_Name, Length: 242361, dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['State_Name'].astype('int64') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "36091a1e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n",
       "       20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['State_Name'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b3560b7d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['NICOBARS', 'NORTH AND MIDDLE ANDAMAN', 'SOUTH ANDAMANS',\n",
       "       'ANANTAPUR', 'CHITTOOR', 'EAST GODAVARI', 'GUNTUR', 'KADAPA',\n",
       "       'KRISHNA', 'KURNOOL', 'PRAKASAM', 'SPSR NELLORE', 'SRIKAKULAM',\n",
       "       'VISAKHAPATANAM', 'VIZIANAGARAM', 'WEST GODAVARI', 'ANJAW',\n",
       "       'CHANGLANG', 'DIBANG VALLEY', 'EAST KAMENG', 'EAST SIANG',\n",
       "       'KURUNG KUMEY', 'LOHIT', 'LONGDING', 'LOWER DIBANG VALLEY',\n",
       "       'LOWER SUBANSIRI', 'NAMSAI', 'PAPUM PARE', 'TAWANG', 'TIRAP',\n",
       "       'UPPER SIANG', 'UPPER SUBANSIRI', 'WEST KAMENG', 'WEST SIANG',\n",
       "       'BAKSA', 'BARPETA', 'BONGAIGAON', 'CACHAR', 'CHIRANG', 'DARRANG',\n",
       "       'DHEMAJI', 'DHUBRI', 'DIBRUGARH', 'DIMA HASAO', 'GOALPARA',\n",
       "       'GOLAGHAT', 'HAILAKANDI', 'JORHAT', 'KAMRUP', 'KAMRUP METRO',\n",
       "       'KARBI ANGLONG', 'KARIMGANJ', 'KOKRAJHAR', 'LAKHIMPUR', 'MARIGAON',\n",
       "       'NAGAON', 'NALBARI', 'SIVASAGAR', 'SONITPUR', 'TINSUKIA',\n",
       "       'UDALGURI', 'ARARIA', 'ARWAL', 'AURANGABAD', 'BANKA', 'BEGUSARAI',\n",
       "       'BHAGALPUR', 'BHOJPUR', 'BUXAR', 'DARBHANGA', 'GAYA', 'GOPALGANJ',\n",
       "       'JAMUI', 'JEHANABAD', 'KAIMUR (BHABUA)', 'KATIHAR', 'KHAGARIA',\n",
       "       'KISHANGANJ', 'LAKHISARAI', 'MADHEPURA', 'MADHUBANI', 'MUNGER',\n",
       "       'MUZAFFARPUR', 'NALANDA', 'NAWADA', 'PASHCHIM CHAMPARAN', 'PATNA',\n",
       "       'PURBI CHAMPARAN', 'PURNIA', 'ROHTAS', 'SAHARSA', 'SAMASTIPUR',\n",
       "       'SARAN', 'SHEIKHPURA', 'SHEOHAR', 'SITAMARHI', 'SIWAN', 'SUPAUL',\n",
       "       'VAISHALI', 'CHANDIGARH', 'BALOD', 'BALODA BAZAR', 'BALRAMPUR',\n",
       "       'BASTAR', 'BEMETARA', 'BIJAPUR', 'BILASPUR', 'DANTEWADA',\n",
       "       'DHAMTARI', 'DURG', 'GARIYABAND', 'JANJGIR-CHAMPA', 'JASHPUR',\n",
       "       'KABIRDHAM', 'KANKER', 'KONDAGAON', 'KORBA', 'KOREA', 'MAHASAMUND',\n",
       "       'MUNGELI', 'NARAYANPUR', 'RAIGARH', 'RAIPUR', 'RAJNANDGAON',\n",
       "       'SUKMA', 'SURAJPUR', 'SURGUJA', 'DADRA AND NAGAR HAVELI',\n",
       "       'NORTH GOA', 'SOUTH GOA', 'AHMADABAD', 'AMRELI', 'ANAND',\n",
       "       'BANAS KANTHA', 'BHARUCH', 'BHAVNAGAR', 'DANG', 'DOHAD',\n",
       "       'GANDHINAGAR', 'JAMNAGAR', 'JUNAGADH', 'KACHCHH', 'KHEDA',\n",
       "       'MAHESANA', 'NARMADA', 'NAVSARI', 'PANCH MAHALS', 'PATAN',\n",
       "       'PORBANDAR', 'RAJKOT', 'SABAR KANTHA', 'SURAT', 'SURENDRANAGAR',\n",
       "       'TAPI', 'VADODARA', 'VALSAD', 'AMBALA', 'BHIWANI', 'FARIDABAD',\n",
       "       'FATEHABAD', 'GURGAON', 'HISAR', 'JHAJJAR', 'JIND', 'KAITHAL',\n",
       "       'KARNAL', 'KURUKSHETRA', 'MAHENDRAGARH', 'MEWAT', 'PALWAL',\n",
       "       'PANCHKULA', 'PANIPAT', 'REWARI', 'ROHTAK', 'SIRSA', 'SONIPAT',\n",
       "       'YAMUNANAGAR', 'CHAMBA', 'HAMIRPUR', 'KANGRA', 'KINNAUR', 'KULLU',\n",
       "       'LAHUL AND SPITI', 'MANDI', 'SHIMLA', 'SIRMAUR', 'SOLAN', 'UNA',\n",
       "       'ANANTNAG', 'BADGAM', 'BANDIPORA', 'BARAMULLA', 'DODA',\n",
       "       'GANDERBAL', 'JAMMU', 'KARGIL', 'KATHUA', 'KISHTWAR', 'KULGAM',\n",
       "       'KUPWARA', 'LEH LADAKH', 'POONCH', 'PULWAMA', 'RAJAURI', 'RAMBAN',\n",
       "       'REASI', 'SAMBA', 'SHOPIAN', 'SRINAGAR', 'UDHAMPUR', 'BOKARO',\n",
       "       'CHATRA', 'DEOGHAR', 'DHANBAD', 'DUMKA', 'EAST SINGHBUM', 'GARHWA',\n",
       "       'GIRIDIH', 'GODDA', 'GUMLA', 'HAZARIBAGH', 'JAMTARA', 'KHUNTI',\n",
       "       'KODERMA', 'LATEHAR', 'LOHARDAGA', 'PAKUR', 'PALAMU', 'RAMGARH',\n",
       "       'RANCHI', 'SAHEBGANJ', 'SARAIKELA KHARSAWAN', 'SIMDEGA',\n",
       "       'WEST SINGHBHUM', 'BAGALKOT', 'BANGALORE RURAL', 'BELGAUM',\n",
       "       'BELLARY', 'BENGALURU URBAN', 'BIDAR', 'CHAMARAJANAGAR',\n",
       "       'CHIKBALLAPUR', 'CHIKMAGALUR', 'CHITRADURGA', 'DAKSHIN KANNAD',\n",
       "       'DAVANGERE', 'DHARWAD', 'GADAG', 'GULBARGA', 'HASSAN', 'HAVERI',\n",
       "       'KODAGU', 'KOLAR', 'KOPPAL', 'MANDYA', 'MYSORE', 'RAICHUR',\n",
       "       'RAMANAGARA', 'SHIMOGA', 'TUMKUR', 'UDUPI', 'UTTAR KANNAD',\n",
       "       'YADGIR', 'ALAPPUZHA', 'ERNAKULAM', 'IDUKKI', 'KANNUR',\n",
       "       'KASARAGOD', 'KOLLAM', 'KOTTAYAM', 'KOZHIKODE', 'MALAPPURAM',\n",
       "       'PALAKKAD', 'PATHANAMTHITTA', 'THIRUVANANTHAPURAM', 'THRISSUR',\n",
       "       'WAYANAD', 'AGAR MALWA', 'ALIRAJPUR', 'ANUPPUR', 'ASHOKNAGAR',\n",
       "       'BALAGHAT', 'BARWANI', 'BETUL', 'BHIND', 'BHOPAL', 'BURHANPUR',\n",
       "       'CHHATARPUR', 'CHHINDWARA', 'DAMOH', 'DATIA', 'DEWAS', 'DHAR',\n",
       "       'DINDORI', 'GUNA', 'GWALIOR', 'HARDA', 'HOSHANGABAD', 'INDORE',\n",
       "       'JABALPUR', 'JHABUA', 'KATNI', 'KHANDWA', 'KHARGONE', 'MANDLA',\n",
       "       'MANDSAUR', 'MORENA', 'NARSINGHPUR', 'NEEMUCH', 'PANNA', 'RAISEN',\n",
       "       'RAJGARH', 'RATLAM', 'REWA', 'SAGAR', 'SATNA', 'SEHORE', 'SEONI',\n",
       "       'SHAHDOL', 'SHAJAPUR', 'SHEOPUR', 'SHIVPURI', 'SIDHI', 'SINGRAULI',\n",
       "       'TIKAMGARH', 'UJJAIN', 'UMARIA', 'VIDISHA', 'AHMEDNAGAR', 'AKOLA',\n",
       "       'AMRAVATI', 'BEED', 'BHANDARA', 'BULDHANA', 'CHANDRAPUR', 'DHULE',\n",
       "       'GADCHIROLI', 'GONDIA', 'HINGOLI', 'JALGAON', 'JALNA', 'KOLHAPUR',\n",
       "       'LATUR', 'MUMBAI', 'NAGPUR', 'NANDED', 'NANDURBAR', 'NASHIK',\n",
       "       'OSMANABAD', 'PALGHAR', 'PARBHANI', 'PUNE', 'RAIGAD', 'RATNAGIRI',\n",
       "       'SANGLI', 'SATARA', 'SINDHUDURG', 'SOLAPUR', 'THANE', 'WARDHA',\n",
       "       'WASHIM', 'YAVATMAL', 'BISHNUPUR', 'CHANDEL', 'CHURACHANDPUR',\n",
       "       'IMPHAL EAST', 'IMPHAL WEST', 'SENAPATI', 'TAMENGLONG', 'THOUBAL',\n",
       "       'UKHRUL', 'EAST GARO HILLS', 'EAST JAINTIA HILLS',\n",
       "       'EAST KHASI HILLS', 'NORTH GARO HILLS', 'RI BHOI',\n",
       "       'SOUTH GARO HILLS', 'SOUTH WEST GARO HILLS',\n",
       "       'SOUTH WEST KHASI HILLS', 'WEST GARO HILLS', 'WEST JAINTIA HILLS',\n",
       "       'WEST KHASI HILLS', 'AIZAWL', 'CHAMPHAI', 'KOLASIB', 'LAWNGTLAI',\n",
       "       'LUNGLEI', 'MAMIT', 'SAIHA', 'SERCHHIP', 'DIMAPUR', 'KIPHIRE',\n",
       "       'KOHIMA', 'LONGLENG', 'MOKOKCHUNG', 'MON', 'PEREN', 'PHEK',\n",
       "       'TUENSANG', 'WOKHA', 'ZUNHEBOTO', 'ANUGUL', 'BALANGIR',\n",
       "       'BALESHWAR', 'BARGARH', 'BHADRAK', 'BOUDH', 'CUTTACK', 'DEOGARH',\n",
       "       'DHENKANAL', 'GAJAPATI', 'GANJAM', 'JAGATSINGHAPUR', 'JAJAPUR',\n",
       "       'JHARSUGUDA', 'KALAHANDI', 'KANDHAMAL', 'KENDRAPARA', 'KENDUJHAR',\n",
       "       'KHORDHA', 'KORAPUT', 'MALKANGIRI', 'MAYURBHANJ', 'NABARANGPUR',\n",
       "       'NAYAGARH', 'NUAPADA', 'PURI', 'RAYAGADA', 'SAMBALPUR', 'SONEPUR',\n",
       "       'SUNDARGARH', 'KARAIKAL', 'MAHE', 'PONDICHERRY', 'YANAM',\n",
       "       'AMRITSAR', 'BARNALA', 'BATHINDA', 'FARIDKOT', 'FATEHGARH SAHIB',\n",
       "       'FAZILKA', 'FIROZEPUR', 'GURDASPUR', 'HOSHIARPUR', 'JALANDHAR',\n",
       "       'KAPURTHALA', 'LUDHIANA', 'MANSA', 'MOGA', 'MUKTSAR', 'NAWANSHAHR',\n",
       "       'PATHANKOT', 'PATIALA', 'RUPNAGAR', 'S.A.S NAGAR', 'SANGRUR',\n",
       "       'TARN TARAN', 'AJMER', 'ALWAR', 'BANSWARA', 'BARAN', 'BARMER',\n",
       "       'BHARATPUR', 'BHILWARA', 'BIKANER', 'BUNDI', 'CHITTORGARH',\n",
       "       'CHURU', 'DAUSA', 'DHOLPUR', 'DUNGARPUR', 'GANGANAGAR',\n",
       "       'HANUMANGARH', 'JAIPUR', 'JAISALMER', 'JALORE', 'JHALAWAR',\n",
       "       'JHUNJHUNU', 'JODHPUR', 'KARAULI', 'KOTA', 'NAGAUR', 'PALI',\n",
       "       'PRATAPGARH', 'RAJSAMAND', 'SAWAI MADHOPUR', 'SIKAR', 'SIROHI',\n",
       "       'TONK', 'UDAIPUR', 'EAST DISTRICT', 'NORTH DISTRICT',\n",
       "       'SOUTH DISTRICT', 'WEST DISTRICT', 'ARIYALUR', 'COIMBATORE',\n",
       "       'CUDDALORE', 'DHARMAPURI', 'DINDIGUL', 'ERODE', 'KANCHIPURAM',\n",
       "       'KANNIYAKUMARI', 'KARUR', 'KRISHNAGIRI', 'MADURAI', 'NAGAPATTINAM',\n",
       "       'NAMAKKAL', 'PERAMBALUR', 'PUDUKKOTTAI', 'RAMANATHAPURAM', 'SALEM',\n",
       "       'SIVAGANGA', 'THANJAVUR', 'THE NILGIRIS', 'THENI', 'THIRUVALLUR',\n",
       "       'THIRUVARUR', 'TIRUCHIRAPPALLI', 'TIRUNELVELI', 'TIRUPPUR',\n",
       "       'TIRUVANNAMALAI', 'TUTICORIN', 'VELLORE', 'VILLUPURAM',\n",
       "       'VIRUDHUNAGAR', 'ADILABAD', 'HYDERABAD', 'KARIMNAGAR', 'KHAMMAM',\n",
       "       'MAHBUBNAGAR', 'MEDAK', 'NALGONDA', 'NIZAMABAD', 'RANGAREDDI',\n",
       "       'WARANGAL', 'DHALAI', 'GOMATI', 'KHOWAI', 'NORTH TRIPURA',\n",
       "       'SEPAHIJALA', 'SOUTH TRIPURA', 'UNAKOTI', 'WEST TRIPURA', 'AGRA',\n",
       "       'ALIGARH', 'ALLAHABAD', 'AMBEDKAR NAGAR', 'AMETHI', 'AMROHA',\n",
       "       'AURAIYA', 'AZAMGARH', 'BAGHPAT', 'BAHRAICH', 'BALLIA', 'BANDA',\n",
       "       'BARABANKI', 'BAREILLY', 'BASTI', 'BIJNOR', 'BUDAUN',\n",
       "       'BULANDSHAHR', 'CHANDAULI', 'CHITRAKOOT', 'DEORIA', 'ETAH',\n",
       "       'ETAWAH', 'FAIZABAD', 'FARRUKHABAD', 'FATEHPUR', 'FIROZABAD',\n",
       "       'GAUTAM BUDDHA NAGAR', 'GHAZIABAD', 'GHAZIPUR', 'GONDA',\n",
       "       'GORAKHPUR', 'HAPUR', 'HARDOI', 'HATHRAS', 'JALAUN', 'JAUNPUR',\n",
       "       'JHANSI', 'KANNAUJ', 'KANPUR DEHAT', 'KANPUR NAGAR', 'KASGANJ',\n",
       "       'KAUSHAMBI', 'KHERI', 'KUSHI NAGAR', 'LALITPUR', 'LUCKNOW',\n",
       "       'MAHARAJGANJ', 'MAHOBA', 'MAINPURI', 'MATHURA', 'MAU', 'MEERUT',\n",
       "       'MIRZAPUR', 'MORADABAD', 'MUZAFFARNAGAR', 'PILIBHIT', 'RAE BARELI',\n",
       "       'RAMPUR', 'SAHARANPUR', 'SAMBHAL', 'SANT KABEER NAGAR',\n",
       "       'SANT RAVIDAS NAGAR', 'SHAHJAHANPUR', 'SHAMLI', 'SHRAVASTI',\n",
       "       'SIDDHARTH NAGAR', 'SITAPUR', 'SONBHADRA', 'SULTANPUR', 'UNNAO',\n",
       "       'VARANASI', 'ALMORA', 'BAGESHWAR', 'CHAMOLI', 'CHAMPAWAT',\n",
       "       'DEHRADUN', 'HARIDWAR', 'NAINITAL', 'PAURI GARHWAL', 'PITHORAGARH',\n",
       "       'RUDRA PRAYAG', 'TEHRI GARHWAL', 'UDAM SINGH NAGAR', 'UTTAR KASHI',\n",
       "       '24 PARAGANAS NORTH', '24 PARAGANAS SOUTH', 'BANKURA', 'BARDHAMAN',\n",
       "       'BIRBHUM', 'COOCHBEHAR', 'DARJEELING', 'DINAJPUR DAKSHIN',\n",
       "       'DINAJPUR UTTAR', 'HOOGHLY', 'HOWRAH', 'JALPAIGURI', 'MALDAH',\n",
       "       'MEDINIPUR EAST', 'MEDINIPUR WEST', 'MURSHIDABAD', 'NADIA',\n",
       "       'PURULIA'], dtype=object)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['District_Name'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a608df2e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Kharif     ', 'Whole Year ', 'Autumn     ', 'Rabi       ',\n",
       "       'Summer     ', 'Winter     '], dtype=object)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Season'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "05bde73f",
   "metadata": {},
   "outputs": [],
   "source": [
    "train.loc[(train['Season']=='Kharif     '),'Season']=1\n",
    "train.loc[(train['Season']=='Whole Year '),'Season']=2\n",
    "train.loc[(train['Season']=='Autumn     '),'Season']=3\n",
    "train.loc[(train['Season']=='Rabi       '),'Season']=4\n",
    "train.loc[(train['Season']=='Summer     '),'Season']=5\n",
    "train.loc[(train['Season']=='Winter     '),'Season']=6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d0624583",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         1\n",
       "1         1\n",
       "2         1\n",
       "3         2\n",
       "4         2\n",
       "         ..\n",
       "242356    5\n",
       "242357    5\n",
       "242358    2\n",
       "242359    6\n",
       "242360    6\n",
       "Name: Season, Length: 242361, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Season'].astype('int64') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "4b6b8d13",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3, 4, 5, 6], dtype=object)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Season'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "4146b108",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Arecanut', 'Other Kharif pulses', 'Rice', 'Banana', 'Cashewnut',\n",
       "       'Coconut ', 'Dry ginger', 'Sugarcane', 'Sweet potato', 'Tapioca',\n",
       "       'Black pepper', 'Dry chillies', 'other oilseeds', 'Turmeric',\n",
       "       'Maize', 'Moong(Green Gram)', 'Urad', 'Arhar/Tur', 'Groundnut',\n",
       "       'Sunflower', 'Bajra', 'Castor seed', 'Cotton(lint)', 'Horse-gram',\n",
       "       'Jowar', 'Korra', 'Ragi', 'Tobacco', 'Gram', 'Wheat', 'Masoor',\n",
       "       'Sesamum', 'Linseed', 'Safflower', 'Onion', 'other misc. pulses',\n",
       "       'Samai', 'Small millets', 'Coriander', 'Potato',\n",
       "       'Other  Rabi pulses', 'Soyabean', 'Beans & Mutter(Vegetable)',\n",
       "       'Bhindi', 'Brinjal', 'Citrus Fruit', 'Cucumber', 'Grapes', 'Mango',\n",
       "       'Orange', 'other fibres', 'Other Fresh Fruits', 'Other Vegetables',\n",
       "       'Papaya', 'Pome Fruit', 'Tomato', 'Mesta', 'Cowpea(Lobia)',\n",
       "       'Lemon', 'Pome Granet', 'Sapota', 'Cabbage', 'Rapeseed &Mustard',\n",
       "       'Peas  (vegetable)', 'Niger seed', 'Bottle Gourd', 'Varagu',\n",
       "       'Garlic', 'Ginger', 'Oilseeds total', 'Pulses total', 'Jute',\n",
       "       'Peas & beans (Pulses)', 'Blackgram', 'Paddy', 'Pineapple',\n",
       "       'Barley', 'Sannhamp', 'Khesari', 'Guar seed', 'Moth',\n",
       "       'Other Cereals & Millets', 'Cond-spcs other', 'Turnip', 'Carrot',\n",
       "       'Redish', 'Arcanut (Processed)', 'Atcanut (Raw)',\n",
       "       'Cashewnut Processed', 'Cashewnut Raw', 'Cardamom', 'Rubber',\n",
       "       'Bitter Gourd', 'Drum Stick', 'Jack Fruit', 'Snak Guard', 'Tea',\n",
       "       'Coffee', 'Cauliflower', 'Other Citrus Fruit', 'Water Melon',\n",
       "       'Total foodgrain', 'Kapas', 'Colocosia', 'Lentil', 'Bean',\n",
       "       'Jobster', 'Perilla', 'Rajmash Kholar', 'Ricebean (nagadal)',\n",
       "       'Ash Gourd', 'Beet Root', 'Lab-Lab', 'Ribed Guard', 'Yam',\n",
       "       'Pump Kin', 'Apple', 'Peach', 'Pear', 'Plums', 'Litchi', 'Ber',\n",
       "       'Other Dry Fruit', 'Jute & mesta'], dtype=object)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Crop'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7ae873a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "train.loc[(train['Crop']=='Arecanut'),'Crop']=1\n",
    "train.loc[(train['Crop']=='Other Kharif pulses'),'Crop']=2\n",
    "train.loc[(train['Crop']=='Rice'),'Crop']=3\n",
    "train.loc[(train['Crop']=='Banana'),'Crop']=4\n",
    "train.loc[(train['Crop']=='Cashewnut'),'Crop']=5\n",
    "train.loc[(train['Crop']=='Coconut '),'Crop']=6\n",
    "train.loc[(train['Crop']=='Dry ginger'),'Crop']=7\n",
    "train.loc[(train['Crop']=='Sugarcane'),'Crop']=8\n",
    "train.loc[(train['Crop']=='Sweet potato'),'Crop']=9\n",
    "train.loc[(train['Crop']=='Tapioca'),'Crop']=10\n",
    "train.loc[(train['Crop']=='Black pepper'),'Crop']=11\n",
    "train.loc[(train['Crop']=='Dry chillies'),'Crop']=12\n",
    "train.loc[(train['Crop']=='other oilseeds'),'Crop']=13\n",
    "train.loc[(train['Crop']=='Turmeric'),'Crop']=14\n",
    "train.loc[(train['Crop']=='Maize'),'Crop']=15\n",
    "train.loc[(train['Crop']=='Moong(Green Gram)'),'Crop']=16\n",
    "train.loc[(train['Crop']=='Urad'),'Crop']=17\n",
    "train.loc[(train['Crop']=='Arhar/Tur'),'Crop']=18\n",
    "train.loc[(train['Crop']=='Groundnut'),'Crop']=19\n",
    "train.loc[(train['Crop']=='Sunflower'),'Crop']=20\n",
    "train.loc[(train['Crop']=='Bajra'),'Crop']=21\n",
    "train.loc[(train['Crop']=='Castor seed'),'Crop']=22\n",
    "train.loc[(train['Crop']=='Cotton(lint)'),'Crop']=23\n",
    "train.loc[(train['Crop']=='Horse-gram'),'Crop']=24\n",
    "train.loc[(train['Crop']=='Jowar'),'Crop']=25\n",
    "train.loc[(train['Crop']=='Korra'),'Crop']=26\n",
    "train.loc[(train['Crop']=='Ragi'),'Crop']=27\n",
    "train.loc[(train['Crop']=='Tobacco'),'Crop']=28\n",
    "train.loc[(train['Crop']=='Gram'),'Crop']=29\n",
    "train.loc[(train['Crop']=='Wheat'),'Crop']=30\n",
    "train.loc[(train['Crop']=='Masoor'),'Crop']=31\n",
    "train.loc[(train['Crop']=='Sesamum'),'Crop']=32\n",
    "train.loc[(train['Crop']=='Linseed'),'Crop']=33\n",
    "train.loc[(train['Crop']=='Safflower'),'Crop']=34\n",
    "train.loc[(train['Crop']=='Onion'),'Crop']=35\n",
    "train.loc[(train['Crop']=='other misc. pulses'),'Crop']=36\n",
    "train.loc[(train['Crop']=='Samai'),'Crop']=37\n",
    "train.loc[(train['Crop']=='Small millets'),'Crop']=38\n",
    "train.loc[(train['Crop']=='Coriander'),'Crop']=39\n",
    "train.loc[(train['Crop']=='Potato'),'Crop']=40\n",
    "train.loc[(train['Crop']=='Other  Rabi pulses'),'Crop']=41\n",
    "train.loc[(train['Crop']=='Soyabean'),'Crop']=42\n",
    "train.loc[(train['Crop']=='Beans & Mutter(Vegetable)'),'Crop']=43\n",
    "train.loc[(train['Crop']=='Bhindi'),'Crop']=44\n",
    "train.loc[(train['Crop']=='Brinjal'),'Crop']=45\n",
    "train.loc[(train['Crop']=='Citrus Fruit'),'Crop']=46\n",
    "train.loc[(train['Crop']=='Cucumber'),'Crop']=47\n",
    "train.loc[(train['Crop']=='Grapes'),'Crop']=48\n",
    "train.loc[(train['Crop']=='Mango'),'Crop']=49\n",
    "train.loc[(train['Crop']=='Orange'),'Crop']=50\n",
    "train.loc[(train['Crop']=='other fibres'),'Crop']=51\n",
    "train.loc[(train['Crop']=='Other Fresh Fruits'),'Crop']=52\n",
    "train.loc[(train['Crop']=='Other Vegetables'),'Crop']=53\n",
    "train.loc[(train['Crop']=='Papaya'),'Crop']=54\n",
    "train.loc[(train['Crop']=='Pome Fruit'),'Crop']=55\n",
    "train.loc[(train['Crop']=='Tomato'),'Crop']=56\n",
    "train.loc[(train['Crop']=='Mesta'),'Crop']=57\n",
    "train.loc[(train['Crop']=='Cowpea(Lobia)'),'Crop']=58\n",
    "train.loc[(train['Crop']=='Lemon'),'Crop']=59\n",
    "train.loc[(train['Crop']=='Pome Granet'),'Crop']=60\n",
    "train.loc[(train['Crop']=='Sapota'),'Crop']=61\n",
    "train.loc[(train['Crop']=='Cabbage'),'Crop']=62\n",
    "train.loc[(train['Crop']=='Rapeseed &Mustard'),'Crop']=63\n",
    "train.loc[(train['Crop']=='Peas  (vegetable)'),'Crop']=64\n",
    "train.loc[(train['Crop']=='Niger seed'),'Crop']=65\n",
    "train.loc[(train['Crop']=='Bottle Gourd'),'Crop']=66\n",
    "train.loc[(train['Crop']=='Varagu'),'Crop']=67\n",
    "train.loc[(train['Crop']=='Garlic'),'Crop']=68\n",
    "train.loc[(train['Crop']=='Ginger'),'Crop']=69\n",
    "train.loc[(train['Crop']=='Oilseeds total'),'Crop']=70\n",
    "train.loc[(train['Crop']=='Pulses total'),'Crop']=71\n",
    "train.loc[(train['Crop']=='Jute'),'Crop']=72\n",
    "train.loc[(train['Crop']=='Peas & beans (Pulses)'),'Crop']=73\n",
    "train.loc[(train['Crop']=='Blackgram'),'Crop']=74\n",
    "train.loc[(train['Crop']=='Paddy'),'Crop']=75\n",
    "train.loc[(train['Crop']=='Pineapple'),'Crop']=76\n",
    "train.loc[(train['Crop']=='Barley'),'Crop']=77\n",
    "train.loc[(train['Crop']=='Sannhamp'),'Crop']=78\n",
    "train.loc[(train['Crop']=='Khesari'),'Crop']=79\n",
    "train.loc[(train['Crop']=='Guar seed'),'Crop']=80\n",
    "train.loc[(train['Crop']=='Moth'),'Crop']=81\n",
    "train.loc[(train['Crop']=='Other Cereals & Millets'),'Crop']=82\n",
    "train.loc[(train['Crop']=='Cond-spcs other'),'Crop']=83\n",
    "train.loc[(train['Crop']=='Turnip'),'Crop']=84\n",
    "train.loc[(train['Crop']=='Carrot'),'Crop']=85\n",
    "train.loc[(train['Crop']=='Redish'),'Crop']=86\n",
    "train.loc[(train['Crop']=='Arcanut (Processed)'),'Crop']=87\n",
    "train.loc[(train['Crop']=='Atcanut (Raw)'),'Crop']=88\n",
    "train.loc[(train['Crop']=='Cashewnut Processed'),'Crop']=89\n",
    "train.loc[(train['Crop']=='Cashewnut Raw'),'Crop']=90\n",
    "train.loc[(train['Crop']=='Cardamom'),'Crop']=91\n",
    "train.loc[(train['Crop']=='Rubber'),'Crop']=92\n",
    "train.loc[(train['Crop']=='Bitter Gourd'),'Crop']=93\n",
    "train.loc[(train['Crop']=='Drum Stick'),'Crop']=94\n",
    "train.loc[(train['Crop']=='Jack Fruit'),'Crop']=95\n",
    "train.loc[(train['Crop']=='Snak Guard'),'Crop']=96\n",
    "train.loc[(train['Crop']=='Tea'),'Crop']=97\n",
    "train.loc[(train['Crop']=='Coffee'),'Crop']=98\n",
    "train.loc[(train['Crop']=='Cauliflower'),'Crop']=99\n",
    "train.loc[(train['Crop']=='Other Citrus Fruit'),'Crop']=100\n",
    "train.loc[(train['Crop']=='Water Melon'),'Crop']=101\n",
    "train.loc[(train['Crop']=='Total foodgrain'),'Crop']=102\n",
    "train.loc[(train['Crop']=='Kapas'),'Crop']=103\n",
    "train.loc[(train['Crop']=='Colocosia'),'Crop']=104\n",
    "train.loc[(train['Crop']=='Lentil'),'Crop']=105\n",
    "train.loc[(train['Crop']=='Bean'),'Crop']=106\n",
    "train.loc[(train['Crop']=='Jobster'),'Crop']=107\n",
    "train.loc[(train['Crop']=='Perilla'),'Crop']=108\n",
    "train.loc[(train['Crop']=='Rajmash Kholar'),'Crop']=109\n",
    "train.loc[(train['Crop']=='Ricebean (nagadal)'),'Crop']=110\n",
    "train.loc[(train['Crop']=='Ash Gourd'),'Crop']=111\n",
    "train.loc[(train['Crop']=='Beet Root'),'Crop']=112\n",
    "train.loc[(train['Crop']=='Lab-Lab'),'Crop']=113\n",
    "train.loc[(train['Crop']=='Ribed Guard'),'Crop']=114\n",
    "train.loc[(train['Crop']=='Yam'),'Crop']=115\n",
    "train.loc[(train['Crop']=='Pump Kin'),'Crop']=116\n",
    "train.loc[(train['Crop']=='Apple'),'Crop']=117\n",
    "train.loc[(train['Crop']=='Peach'),'Crop']=118\n",
    "train.loc[(train['Crop']=='Pear'),'Crop']=119\n",
    "train.loc[(train['Crop']=='Plums'),'Crop']=120\n",
    "train.loc[(train['Crop']=='Litchi'),'Crop']=121\n",
    "train.loc[(train['Crop']=='Ber'),'Crop']=122\n",
    "train.loc[(train['Crop']=='Other Dry Fruit'),'Crop']=123\n",
    "train.loc[(train['Crop']=='Jute & mesta'),'Crop']=124\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "af45874f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n",
       "       20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,\n",
       "       37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n",
       "       54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n",
       "       71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,\n",
       "       88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,\n",
       "       104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,\n",
       "       117, 118, 119, 120, 121, 122, 123, 124], dtype=object)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Crop'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "3206f9cd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0          1\n",
       "1          2\n",
       "2          3\n",
       "3          4\n",
       "4          5\n",
       "          ..\n",
       "242356     3\n",
       "242357    32\n",
       "242358     8\n",
       "242359     3\n",
       "242360    32\n",
       "Name: Crop, Length: 242361, dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Crop'].astype('int64')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "8d094658",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Nuts', 'Pulses', 'Cereal', 'Fruits', 'Species', 'Sugarcane',\n",
       "       'Vegetables', 'Beans', 'Oilseeds', 'fibres', 'Commercial',\n",
       "       'Oilseeds total', 'Pulses total', 'Paddy', 'Fertile Plant',\n",
       "       'Other', 'Natural Polymer', 'Tea', 'Coffee', 'Total foodgrain'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['cat_crop'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "588b4799",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(train.corr(), annot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "57edd96c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State_Name</th>\n",
       "      <th>District_Name</th>\n",
       "      <th>Crop_Year</th>\n",
       "      <th>Season</th>\n",
       "      <th>Crop</th>\n",
       "      <th>Area</th>\n",
       "      <th>Production</th>\n",
       "      <th>cat_crop</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>NICOBARS</td>\n",
       "      <td>2000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1254.0</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>Nuts</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>NICOBARS</td>\n",
       "      <td>2000</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Pulses</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>NICOBARS</td>\n",
       "      <td>2000</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>102.0</td>\n",
       "      <td>321.0</td>\n",
       "      <td>Cereal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>NICOBARS</td>\n",
       "      <td>2000</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>176.0</td>\n",
       "      <td>641.0</td>\n",
       "      <td>Fruits</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>NICOBARS</td>\n",
       "      <td>2000</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>720.0</td>\n",
       "      <td>165.0</td>\n",
       "      <td>Nuts</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242356</th>\n",
       "      <td>33</td>\n",
       "      <td>PURULIA</td>\n",
       "      <td>2014</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>306.0</td>\n",
       "      <td>801.0</td>\n",
       "      <td>Cereal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242357</th>\n",
       "      <td>33</td>\n",
       "      <td>PURULIA</td>\n",
       "      <td>2014</td>\n",
       "      <td>5</td>\n",
       "      <td>32</td>\n",
       "      <td>627.0</td>\n",
       "      <td>463.0</td>\n",
       "      <td>Oilseeds</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242358</th>\n",
       "      <td>33</td>\n",
       "      <td>PURULIA</td>\n",
       "      <td>2014</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>324.0</td>\n",
       "      <td>16250.0</td>\n",
       "      <td>Sugarcane</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242359</th>\n",
       "      <td>33</td>\n",
       "      <td>PURULIA</td>\n",
       "      <td>2014</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>279151.0</td>\n",
       "      <td>597899.0</td>\n",
       "      <td>Cereal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242360</th>\n",
       "      <td>33</td>\n",
       "      <td>PURULIA</td>\n",
       "      <td>2014</td>\n",
       "      <td>6</td>\n",
       "      <td>32</td>\n",
       "      <td>175.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>Oilseeds</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>242361 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       State_Name District_Name  Crop_Year Season Crop      Area  Production  \\\n",
       "0               1      NICOBARS       2000      1    1    1254.0      2000.0   \n",
       "1               1      NICOBARS       2000      1    2       2.0         1.0   \n",
       "2               1      NICOBARS       2000      1    3     102.0       321.0   \n",
       "3               1      NICOBARS       2000      2    4     176.0       641.0   \n",
       "4               1      NICOBARS       2000      2    5     720.0       165.0   \n",
       "...           ...           ...        ...    ...  ...       ...         ...   \n",
       "242356         33       PURULIA       2014      5    3     306.0       801.0   \n",
       "242357         33       PURULIA       2014      5   32     627.0       463.0   \n",
       "242358         33       PURULIA       2014      2    8     324.0     16250.0   \n",
       "242359         33       PURULIA       2014      6    3  279151.0    597899.0   \n",
       "242360         33       PURULIA       2014      6   32     175.0        88.0   \n",
       "\n",
       "         cat_crop  \n",
       "0            Nuts  \n",
       "1          Pulses  \n",
       "2          Cereal  \n",
       "3          Fruits  \n",
       "4            Nuts  \n",
       "...           ...  \n",
       "242356     Cereal  \n",
       "242357   Oilseeds  \n",
       "242358  Sugarcane  \n",
       "242359     Cereal  \n",
       "242360   Oilseeds  \n",
       "\n",
       "[242361 rows x 8 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "c426786f",
   "metadata": {},
   "outputs": [],
   "source": [
    "train['Crop'] = train['Crop'].astype(int)\n",
    "train['State_Name'] = train['State_Name'].astype(int)\n",
    "train['Season'] = train['Season'].astype(int)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "702e4f01",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 242361 entries, 0 to 242360\n",
      "Data columns (total 8 columns):\n",
      " #   Column         Non-Null Count   Dtype  \n",
      "---  ------         --------------   -----  \n",
      " 0   State_Name     242361 non-null  int32  \n",
      " 1   District_Name  242361 non-null  object \n",
      " 2   Crop_Year      242361 non-null  int64  \n",
      " 3   Season         242361 non-null  int32  \n",
      " 4   Crop           242361 non-null  int32  \n",
      " 5   Area           242361 non-null  float64\n",
      " 6   Production     242361 non-null  float64\n",
      " 7   cat_crop       242361 non-null  object \n",
      "dtypes: float64(2), int32(3), int64(1), object(2)\n",
      "memory usage: 12.0+ MB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "51b9c5d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "State_Name         int32\n",
       "District_Name     object\n",
       "Crop_Year          int64\n",
       "Season             int32\n",
       "Crop               int32\n",
       "Area             float64\n",
       "Production       float64\n",
       "cat_crop          object\n",
       "dtype: object"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "b7531f5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "X=train[[\"State_Name\",\"Season\",\"Crop\",\"Area\"]]\n",
    "y=train[\"Production\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "334fe842",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "d01febd7",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "886d505e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(n_estimators=10)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(n_estimators=10)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestRegressor(n_estimators=10)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "regressor = RandomForestRegressor(n_estimators=10)\n",
    "regressor.fit(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "3314d4ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9665599831159223\n"
     ]
    }
   ],
   "source": [
    "print(regressor.score(X,y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "573a26f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "importances =regressor.feature_importances_\n",
    "#Visalize feature importances\n",
    "# Sort feature importances in descending order\n",
    "indices = np.argsort(importances)[::-1]\n",
    "# Rearrange feature names so they match the sorted feature importances\n",
    "names = [X_train.columns[i] for i in indices]\n",
    "# Create plot\n",
    "plt.figure()\n",
    "# Create plot title\n",
    "plt.title(\"Feature Importance\")\n",
    "# Add bars\n",
    "plt.bar(range(X_train.shape[1]), importances[indices])\n",
    "# Add feature names as x-axis labels\n",
    "plt.xticks(range(X_train.shape[1]), names, rotation=90)\n",
    "# Show plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "09fd805e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State_Name</th>\n",
       "      <th>District_Name</th>\n",
       "      <th>Crop_Year</th>\n",
       "      <th>Season</th>\n",
       "      <th>Crop</th>\n",
       "      <th>Area</th>\n",
       "      <th>Production</th>\n",
       "      <th>cat_crop</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>427</td>\n",
       "      <td>2000</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1254.0</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>Nuts</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>427</td>\n",
       "      <td>2000</td>\n",
       "      <td>1</td>\n",
       "      <td>74</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Pulses</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>427</td>\n",
       "      <td>2000</td>\n",
       "      <td>1</td>\n",
       "      <td>95</td>\n",
       "      <td>102.0</td>\n",
       "      <td>321.0</td>\n",
       "      <td>Cereal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>427</td>\n",
       "      <td>2000</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>176.0</td>\n",
       "      <td>641.0</td>\n",
       "      <td>Fruits</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>427</td>\n",
       "      <td>2000</td>\n",
       "      <td>4</td>\n",
       "      <td>22</td>\n",
       "      <td>720.0</td>\n",
       "      <td>165.0</td>\n",
       "      <td>Nuts</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242356</th>\n",
       "      <td>32</td>\n",
       "      <td>471</td>\n",
       "      <td>2014</td>\n",
       "      <td>3</td>\n",
       "      <td>95</td>\n",
       "      <td>306.0</td>\n",
       "      <td>801.0</td>\n",
       "      <td>Cereal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242357</th>\n",
       "      <td>32</td>\n",
       "      <td>471</td>\n",
       "      <td>2014</td>\n",
       "      <td>3</td>\n",
       "      <td>102</td>\n",
       "      <td>627.0</td>\n",
       "      <td>463.0</td>\n",
       "      <td>Oilseeds</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242358</th>\n",
       "      <td>32</td>\n",
       "      <td>471</td>\n",
       "      <td>2014</td>\n",
       "      <td>4</td>\n",
       "      <td>106</td>\n",
       "      <td>324.0</td>\n",
       "      <td>16250.0</td>\n",
       "      <td>Sugarcane</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242359</th>\n",
       "      <td>32</td>\n",
       "      <td>471</td>\n",
       "      <td>2014</td>\n",
       "      <td>5</td>\n",
       "      <td>95</td>\n",
       "      <td>279151.0</td>\n",
       "      <td>597899.0</td>\n",
       "      <td>Cereal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242360</th>\n",
       "      <td>32</td>\n",
       "      <td>471</td>\n",
       "      <td>2014</td>\n",
       "      <td>5</td>\n",
       "      <td>102</td>\n",
       "      <td>175.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>Oilseeds</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>242361 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        State_Name  District_Name  Crop_Year  Season  Crop      Area  \\\n",
       "0                0            427       2000       1     2    1254.0   \n",
       "1                0            427       2000       1    74       2.0   \n",
       "2                0            427       2000       1    95     102.0   \n",
       "3                0            427       2000       4     7     176.0   \n",
       "4                0            427       2000       4    22     720.0   \n",
       "...            ...            ...        ...     ...   ...       ...   \n",
       "242356          32            471       2014       3    95     306.0   \n",
       "242357          32            471       2014       3   102     627.0   \n",
       "242358          32            471       2014       4   106     324.0   \n",
       "242359          32            471       2014       5    95  279151.0   \n",
       "242360          32            471       2014       5   102     175.0   \n",
       "\n",
       "        Production   cat_crop  \n",
       "0           2000.0       Nuts  \n",
       "1              1.0     Pulses  \n",
       "2            321.0     Cereal  \n",
       "3            641.0     Fruits  \n",
       "4            165.0       Nuts  \n",
       "...            ...        ...  \n",
       "242356       801.0     Cereal  \n",
       "242357       463.0   Oilseeds  \n",
       "242358     16250.0  Sugarcane  \n",
       "242359    597899.0     Cereal  \n",
       "242360        88.0   Oilseeds  \n",
       "\n",
       "[242361 rows x 8 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "b8b800ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\SanthoshkumarSambamo\\anaconda3\\lib\\site-packages\\sklearn\\base.py:450: UserWarning: X does not have valid feature names, but RandomForestRegressor was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "predictionss=regressor.predict([[32,3,95,306.0]])\n",
    "pred=format(int(predictionss[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "d8bb0dd3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2124'"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "84f53fa0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2039'"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a1e990de",
   "metadata": {},
   "outputs": [],
   "source": [
    "tef=float(price)*5/100.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d15741ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "area_float = 1254.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "05865b71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.6259968102073366"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "float(pred)/float(area_float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "3b806df6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "\n",
    "pickle.dump(regressor,open('random.pkl','wb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "594f248f",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = pickle.load(open('random.pkl', 'rb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c82de8e9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  },
  "vscode": {
   "interpreter": {
    "hash": "f2ec59036bb08395e9a4710f463a856a33c9de359aecd923ceb0f0fab9168812"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
